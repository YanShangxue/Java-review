/*
    方法再执行过程中，在JVM中的内存是如何分配的呢？内存是如何变化的？
        1、方法只定义，不调用，是不会执行的，并且在JVM中也不会给该方法分配
        “运行所属”的内存空间。只有调用时才会动态的给方法分配内存空间。
        2、在JVM内存划分上有这样三块主要的内存空间（此外，还有其它的内存空间）
            * 方法区内存
            * 堆内存
            * 栈内存
        3、关于栈数据结构：
         * 栈：stack，是一种数据结构
         * 数据结构反应的数据的存储形态。
         * 数据结构是独立的学科，不属于任何编程语言的范畴，只不过大多数编程语言中要使用数据结构
         * 作为程序员需要提前精通：数据结构 + 算法
         * java程序员在不精通数据结构的前提下，也可能进行开发，因为java有一套庞大的类库支撑，
           别人写好了，可以直接用。【javaSE当中的集合章节使用了大量的数据结构】
         * 常见的数据结构：
             - 数组
             - 队列
             - 栈
             - 链表
             - 二叉树
             - 哈希表/散列表
             ......

        4、方法执行时代码片段存在哪里？方法执行时执行过程的内存在哪里分配？
             * 方法代码片段属于.class字节码文件的一部分，字节码文件在类加载的
               时候，将其放到了方法区当中。所有JVM中的三块主要内存空间中方法区
               内存最先有数据。存放了代码片段。
             * 代码片段虽然在方法区内存中只有一份，但是可以被重复调用。
               每一次调用这个方法时，需要给该方法分配独立的活动场所，在栈内存中分配。
               【栈内存中分配方法运行的所属内存空间】
        
        5、方法在调用的书简，会给该方法分配内存空间，会在栈中发生压栈动作，方法执行
           结束后，给该方法分配的内存全部释放，此时发生弹栈动作。
             * 压栈：给方法分配内存
             * 弹栈：释放该方法的内存空间
        
        6、局部变量早方法体中声明。运行阶段局部变量在栈中分配存储。
        
        7、


*/
public class MethodTest05 {
    public static void main(String[] args) {
        
    }

    public static void m() {
        
    }
}
